diff -urN linux-2.4.16/include/linux/netfilter.h linux-2.4.16-brnf0.0.4/include/linux/netfilter.h
--- linux-2.4.16/include/linux/netfilter.h	Thu Nov 22 20:47:48 2001
+++ linux-2.4.16-brnf0.0.4/include/linux/netfilter.h	Mon Dec 10 18:37:56 2001
@@ -117,17 +117,23 @@
 /* This is gross, but inline doesn't cut it for avoiding the function
    call in fast path: gcc doesn't inline (needs value tracking?). --RR */
 #ifdef CONFIG_NETFILTER_DEBUG
-#define NF_HOOK nf_hook_slow
+#define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
+		nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN)
+#define NF_HOOK_THRESH nf_hook_slow
 #else
 #define NF_HOOK(pf, hook, skb, indev, outdev, okfn)			\
 (list_empty(&nf_hooks[(pf)][(hook)])					\
  ? (okfn)(skb)								\
- : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn)))
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), INT_MIN))
+#define NF_HOOK_THRESH(pf, hook, skb, indev, outdev, okfn, thresh)	\
+(list_empty(&nf_hooks[(pf)][(hook)])					\
+ ? (okfn)(skb)								\
+ : nf_hook_slow((pf), (hook), (skb), (indev), (outdev), (okfn), (thresh)))
 #endif
 
 int nf_hook_slow(int pf, unsigned int hook, struct sk_buff *skb,
 		 struct net_device *indev, struct net_device *outdev,
-		 int (*okfn)(struct sk_buff *));
+		 int (*okfn)(struct sk_buff *), int thresh);
 
 /* Call setsockopt() */
 int nf_setsockopt(struct sock *sk, int pf, int optval, char *opt, 
diff -urN linux-2.4.16/include/linux/netfilter_ipv4.h linux-2.4.16-brnf0.0.4/include/linux/netfilter_ipv4.h
--- linux-2.4.16/include/linux/netfilter_ipv4.h	Thu Nov 22 20:48:57 2001
+++ linux-2.4.16-brnf0.0.4/include/linux/netfilter_ipv4.h	Mon Dec 10 18:37:56 2001
@@ -54,6 +54,7 @@
 	NF_IP_PRI_CONNTRACK = -200,
 	NF_IP_PRI_MANGLE = -150,
 	NF_IP_PRI_NAT_DST = -100,
+	NF_IP_PRI_BRIDGE_SABOTAGE = -50,
 	NF_IP_PRI_FILTER = 0,
 	NF_IP_PRI_NAT_SRC = 100,
 	NF_IP_PRI_LAST = INT_MAX,
diff -urN linux-2.4.16/include/linux/skbuff.h linux-2.4.16-brnf0.0.4/include/linux/skbuff.h
--- linux-2.4.16/include/linux/skbuff.h	Thu Nov 22 20:46:26 2001
+++ linux-2.4.16-brnf0.0.4/include/linux/skbuff.h	Mon Dec 10 18:37:56 2001
@@ -135,6 +135,9 @@
 	struct sock	*sk;			/* Socket we are owned by 			*/
 	struct timeval	stamp;			/* Time we arrived				*/
 	struct net_device	*dev;		/* Device we arrived on/are leaving by		*/
+#define HAVE_SKBUFF_PHYSINOUTDEV
+	struct net_device	*physindev;	/* Physical device we arrived on		*/
+	struct net_device	*physoutdev;	/* Physical device we will leave by		*/
 
 	/* Transport layer header */
 	union
diff -urN linux-2.4.16/net/Config.in linux-2.4.16-brnf0.0.4/net/Config.in
--- linux-2.4.16/net/Config.in	Wed Oct 31 00:08:12 2001
+++ linux-2.4.16-brnf0.0.4/net/Config.in	Mon Dec 10 18:37:56 2001
@@ -63,6 +63,9 @@
 fi
 tristate '802.1d Ethernet Bridging' CONFIG_BRIDGE
 if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
+   if [ "$CONFIG_BRIDGE" != "n" -a "$CONFIG_NETFILTER" != "n" ]; then
+      bool '  netfilter (firewalling) support' CONFIG_BRIDGE_NF
+   fi
    tristate 'CCITT X.25 Packet Layer (EXPERIMENTAL)' CONFIG_X25
    tristate 'LAPB Data Link Driver (EXPERIMENTAL)' CONFIG_LAPB
    bool '802.2 LLC (EXPERIMENTAL)' CONFIG_LLC
diff -urN linux-2.4.16/net/bridge/Makefile linux-2.4.16-brnf0.0.4/net/bridge/Makefile
--- linux-2.4.16/net/bridge/Makefile	Fri Dec 29 23:07:24 2000
+++ linux-2.4.16-brnf0.0.4/net/bridge/Makefile	Mon Dec 10 18:37:56 2001
@@ -13,4 +13,6 @@
 			br_stp_if.o br_stp_timer.o
 obj-m		:= $(O_TARGET)
 
+obj-$(CONFIG_BRIDGE_NF) += br_netfilter.o
+
 include $(TOPDIR)/Rules.make
diff -urN linux-2.4.16/net/bridge/br.c linux-2.4.16-brnf0.0.4/net/bridge/br.c
--- linux-2.4.16/net/bridge/br.c	Wed Oct 17 23:16:39 2001
+++ linux-2.4.16-brnf0.0.4/net/bridge/br.c	Mon Dec 10 18:37:56 2001
@@ -42,6 +42,11 @@
 {
 	printk(KERN_INFO "NET4: Ethernet Bridge 008 for NET4.0\n");
 
+#ifdef CONFIG_BRIDGE_NF
+	if (br_netfilter_init())
+		return 1;
+#endif
+
 	br_handle_frame_hook = br_handle_frame;
 #ifdef CONFIG_INET
 	br_ioctl_hook = br_ioctl_deviceless_stub;
@@ -69,6 +74,9 @@
 
 static void __exit br_deinit(void)
 {
+#ifdef CONFIG_BRIDGE_NF
+	br_netfilter_fini();
+#endif
 	unregister_netdevice_notifier(&br_device_notifier);
 	br_call_ioctl_atomic(__br_clear_ioctl_hook);
 	net_call_rx_atomic(__br_clear_frame_hook);
diff -urN linux-2.4.16/net/bridge/br_device.c linux-2.4.16-brnf0.0.4/net/bridge/br_device.c
--- linux-2.4.16/net/bridge/br_device.c	Wed Aug 15 10:54:30 2001
+++ linux-2.4.16-brnf0.0.4/net/bridge/br_device.c	Mon Dec 10 18:37:56 2001
@@ -71,7 +71,7 @@
 	return 0;
 }
 
-static int br_dev_xmit(struct sk_buff *skb, struct net_device *dev)
+int br_dev_xmit(struct sk_buff *skb, struct net_device *dev)
 {
 	struct net_bridge *br;
 	int ret;
diff -urN linux-2.4.16/net/bridge/br_forward.c linux-2.4.16-brnf0.0.4/net/bridge/br_forward.c
--- linux-2.4.16/net/bridge/br_forward.c	Wed Aug 15 10:54:35 2001
+++ linux-2.4.16-brnf0.0.4/net/bridge/br_forward.c	Mon Dec 10 18:37:56 2001
@@ -38,7 +38,7 @@
 	return 0;
 }
 
-static int __br_forward_finish(struct sk_buff *skb)
+int br_forward_finish(struct sk_buff *skb)
 {
 	NF_HOOK(PF_BRIDGE, NF_BR_POST_ROUTING, skb, NULL, skb->dev,
 			__dev_queue_push_xmit);
@@ -54,7 +54,7 @@
 	skb->dev = to->dev;
 
 	NF_HOOK(PF_BRIDGE, NF_BR_LOCAL_OUT, skb, indev, skb->dev,
-			__br_forward_finish);
+			br_forward_finish);
 }
 
 static void __br_forward(struct net_bridge_port *to, struct sk_buff *skb)
@@ -65,7 +65,7 @@
 	skb->dev = to->dev;
 
 	NF_HOOK(PF_BRIDGE, NF_BR_FORWARD, skb, indev, skb->dev,
-			__br_forward_finish);
+			br_forward_finish);
 }
 
 /* called under bridge lock */
diff -urN linux-2.4.16/net/bridge/br_input.c linux-2.4.16-brnf0.0.4/net/bridge/br_input.c
--- linux-2.4.16/net/bridge/br_input.c	Wed Aug 15 10:54:39 2001
+++ linux-2.4.16-brnf0.0.4/net/bridge/br_input.c	Mon Dec 10 18:37:56 2001
@@ -140,7 +140,7 @@
 	kfree_skb(skb);
 }
 
-static int br_handle_frame_finish(struct sk_buff *skb)
+int br_handle_frame_finish(struct sk_buff *skb)
 {
 	struct net_bridge *br;
 
diff -urN linux-2.4.16/net/bridge/br_netfilter.c linux-2.4.16-brnf0.0.4/net/bridge/br_netfilter.c
--- linux-2.4.16/net/bridge/br_netfilter.c	Thu Jan  1 01:00:00 1970
+++ linux-2.4.16-brnf0.0.4/net/bridge/br_netfilter.c	Mon Dec 10 18:40:40 2001
@@ -0,0 +1,387 @@
+/*
+ *	Handle firewalling
+ *	Linux ethernet bridge
+ *
+ *	Authors:
+ *	Lennert Buytenhek               <buytenh@gnu.org>
+ *	Bart de Schuymer		<bart.de.schuymer@pandora.be>
+ *
+ *	$Id: bridge-nf-0.0.4-against-2.4.16.diff,v 1.1 2001/12/10 17:56:54 buytenh Exp $
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License
+ *	as published by the Free Software Foundation; either version
+ *	2 of the License, or (at your option) any later version.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/ip.h>
+#include <linux/netdevice.h>
+#include <linux/skbuff.h>
+#include <linux/if_ether.h>
+#include <linux/netfilter_bridge.h>
+#include <linux/netfilter_ipv4.h>
+#include <net/ip.h>
+#include <net/tcp.h>
+#include <asm/uaccess.h>
+#include <asm/checksum.h>
+#include "br_private.h"
+
+
+//#define dprintk printk
+#define dprintk(args...)
+
+
+#ifndef WE_REALLY_INSIST_ON_NOT_HAVING_NAT_SUPPORT
+/* As the original source/destination addresses are variables private to this
+ * file, we store them in unused space at the end of the control buffer.
+ * On 64-bit platforms the TCP control buffer size still leaves us 8 bytes
+ * of space at the end, so that fits.  Usage of the original source address
+ * and the original destination address never overlaps (daddr is needed
+ * around PRE_ROUTING, and saddr around POST_ROUTING), so that's okay as
+ * well.
+ */
+#define skb_origaddr(skb)		(*((u32 *)((skb)->cb + sizeof((skb)->cb) - 4)))
+
+#define store_orig_dstaddr(skb)		(skb_origaddr(skb) = (skb)->nh.iph->daddr)
+#define store_orig_srcaddr(skb)		(skb_origaddr(skb) = (skb)->nh.iph->saddr)
+#define dnat_took_place(skb)		(skb_origaddr(skb) != (skb)->nh.iph->daddr)
+#define snat_took_place(skb)		(skb_origaddr(skb) != (skb)->nh.iph->saddr)
+#else
+#define store_orig_dstaddr(skb)
+#define store_orig_srcaddr(skb)
+#define dnat_took_place(skb)		(0)
+#define snat_took_place(skb)		(0)
+#endif
+
+
+#define has_bridge_parent(device)	((device)->br_port != NULL)
+#define bridge_parent(device)		(&((device)->br_port->br->dev))
+
+
+static inline void __maybe_fixup_src_address(struct sk_buff *skb)
+{
+	if (snat_took_place(skb) &&
+	    inet_addr_type(skb->nh.iph->saddr) == RTN_LOCAL) {
+		memcpy(skb->mac.ethernet->h_source,
+			bridge_parent(skb->dev)->dev_addr,
+			ETH_ALEN);
+	}
+}
+
+
+
+/* PF_BRIDGE/PRE_ROUTING *********************************************/
+static struct net_device __fake_net_device = {
+	hard_header_len:	ETH_HLEN
+};
+
+static struct dst_entry __fake_dst_entry = {
+	__refcnt:		ATOMIC_INIT(1),
+	dev:			&__fake_net_device,
+	pmtu:			1500
+};
+
+
+static int br_nf_pre_routing_finish(struct sk_buff *skb)
+{
+	struct net_device *dev = skb->dev;
+	struct iphdr *iph = skb->nh.iph;
+
+	dprintk(KERN_NOTICE "br_nf_pre_routing_finish.. ");
+
+	if (dnat_took_place(skb)) {
+		if (ip_route_input(skb, iph->daddr, iph->saddr, iph->tos, dev)) {
+			struct rtable *rt;
+
+			if (ip_route_output(&rt, iph->daddr, 0, iph->tos, dev->ifindex)) {
+				/* This test is racy.  */
+				if (!ip_route_output(&rt, iph->daddr, 0, iph->tos, 0))
+					BUG();
+
+				dprintk("must drop\n");
+				kfree_skb(skb);
+				return 0;
+			}
+
+			dprintk("divert\n");
+			skb->dst = (struct dst_entry *)rt;
+
+			/* This changes source ethernet address.  */
+			skb->dst->output(skb);
+			return NF_STOLEN;
+		} else {
+			dprintk("local ");
+			memcpy(skb->mac.ethernet->h_dest, dev->dev_addr, ETH_ALEN);
+		}
+	} else {
+		skb->dst = &__fake_dst_entry;
+		dst_hold(skb->dst);
+	}
+
+	dprintk("\n");
+
+	skb->dev = skb->physindev;
+	br_handle_frame_finish(skb);
+
+	return 0;
+}
+
+/* (PRE) okfn == br_handle_frame_finish */
+static unsigned int br_nf_pre_routing(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	struct iphdr *iph;
+	__u32 len;
+	struct sk_buff *skb;
+
+	if ((*pskb)->mac.ethernet->h_proto != __constant_htons(ETH_P_IP))
+		return NF_ACCEPT;
+
+	dprintk(KERN_NOTICE "br_nf_pre_routing.. ");
+	if ((skb = skb_share_check(*pskb, GFP_ATOMIC)) == NULL)
+		goto out;
+
+	if (!pskb_may_pull(skb, sizeof(struct iphdr)))
+		goto inhdr_error;
+
+	iph = skb->nh.iph;
+	if (iph->ihl < 5 || iph->version != 4)
+		goto inhdr_error;
+
+	if (!pskb_may_pull(skb, 4*iph->ihl))
+		goto inhdr_error;
+
+	iph = skb->nh.iph;
+	if (ip_fast_csum((__u8 *)iph, iph->ihl) != 0)
+		goto inhdr_error;
+
+	len = ntohs(iph->tot_len);
+	if (skb->len < len || len < 4*iph->ihl)
+		goto inhdr_error;
+
+	if (skb->len > len) {
+		__pskb_trim(skb, len);
+		if (skb->ip_summed == CHECKSUM_HW)
+			skb->ip_summed = CHECKSUM_NONE;
+	}
+
+	skb->physindev = skb->dev;
+	skb->dev = bridge_parent(skb->dev);
+	store_orig_dstaddr(skb);
+	dprintk("calling br_nf_pre_routing_finish\n");
+	NF_HOOK(PF_INET, NF_IP_PRE_ROUTING, skb, skb->dev, NULL,
+		br_nf_pre_routing_finish);
+
+	return NF_STOLEN;
+
+inhdr_error:
+//	IP_INC_STATS_BH(IpInHdrErrors);
+out:
+	dprintk("error out\n");
+	return NF_DROP;
+}
+
+
+/* PF_BRIDGE/LOCAL_IN ************************************************/
+static unsigned int br_nf_local_in(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	struct sk_buff *skb = *pskb;
+
+	if (skb->mac.ethernet->h_proto != __constant_htons(ETH_P_IP))
+		return NF_ACCEPT;
+
+	dprintk(KERN_NOTICE "br_nf_local_in..\n");
+	if (skb->dst == &__fake_dst_entry) {
+		dst_release(&__fake_dst_entry);
+		skb->dst = NULL;
+	}
+
+	return NF_ACCEPT;
+}
+
+
+/* PF_BRIDGE/FORWARD *************************************************/
+static int br_nf_forward_finish(struct sk_buff *skb)
+{
+	dprintk(KERN_NOTICE "br_nf_forward_finish..\n");
+	__maybe_fixup_src_address(skb);
+	br_forward_finish(skb);
+
+	return 0;
+}
+
+static int br_nf_forward_postrouting(struct sk_buff *skb)
+{
+	dprintk(KERN_NOTICE "br_nf_forward_postrouting..\n");
+	store_orig_srcaddr(skb);
+
+	NF_HOOK(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
+		bridge_parent(skb->dev), br_nf_forward_finish);
+
+	return 0;
+}
+
+/* (PRE) okfn == br_forward_finish */
+static unsigned int br_nf_forward(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	struct sk_buff *skb = *pskb;
+
+	if (skb->mac.ethernet->h_proto != __constant_htons(ETH_P_IP))
+		return NF_ACCEPT;
+
+	dprintk(KERN_NOTICE "br_nf_forward..\n");
+
+	skb->physoutdev = skb->dev;
+	NF_HOOK(PF_INET, NF_IP_FORWARD, skb, bridge_parent(skb->physindev),
+			bridge_parent(skb->dev), br_nf_forward_postrouting);
+
+	return NF_STOLEN;
+}
+
+
+/* PF_BRIDGE/LOCAL_OUT ***********************************************/
+static int br_nf_local_out_finish(struct sk_buff *skb)
+{
+	dprintk(KERN_NOTICE "br_nf_local_out_finish..\n");
+	__maybe_fixup_src_address(skb);
+	br_forward_finish(skb);
+
+	return 0;
+}
+
+static int br_nf_local_out_postrouting(struct sk_buff *skb)
+{
+	dprintk(KERN_NOTICE "br_nf_local_out_postrouting..\n");
+	store_orig_srcaddr(skb);
+
+	NF_HOOK(PF_INET, NF_IP_POST_ROUTING, skb, NULL,
+		bridge_parent(skb->dev), br_nf_local_out_finish);
+
+	return 0;
+}
+
+/* (PRE) okfn == br_forward_finish */
+static unsigned int br_nf_local_out(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	int hookno;
+	struct net_device *realindev;
+	struct sk_buff *skb = *pskb;
+
+	if (skb->mac.ethernet->h_proto != __constant_htons(ETH_P_IP))
+		return NF_ACCEPT;
+
+	/* Sometimes we get packets with NULL ->dst here (for example,
+	 * running a dhcp client daemon triggers this).
+	 */
+	if (skb->dst == NULL)
+		return NF_ACCEPT;
+
+	dprintk(KERN_NOTICE "br_nf_local_out.. ");
+
+	skb->physoutdev = skb->dev;
+
+	hookno = NF_IP_LOCAL_OUT;
+	if ((realindev = skb->physindev) != NULL) {
+		hookno = NF_IP_FORWARD;
+		if (has_bridge_parent(realindev))
+			realindev = bridge_parent(realindev);
+	}
+
+	dprintk("%s\n", hookno==NF_IP_LOCAL_OUT?"LO":"FW");
+
+	NF_HOOK_THRESH(PF_INET, hookno, skb, realindev,
+			bridge_parent(skb->dev),
+			br_nf_local_out_postrouting,
+			NF_IP_PRI_BRIDGE_SABOTAGE + 1);
+
+	return NF_STOLEN;
+}
+
+
+/* IPv4/SABOTAGE *****************************************************/
+static unsigned int ipv4_sabotage_in(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	if (in->hard_start_xmit == br_dev_xmit &&
+	    okfn != br_nf_pre_routing_finish) {
+		struct sk_buff *skb = *pskb;
+
+		dprintk(KERN_NOTICE "ipv4_sabotage_in %i %p\n", hook, skb);
+		okfn(skb);
+		return NF_STOLEN;
+	}
+
+	return NF_ACCEPT;
+}
+
+static unsigned int ipv4_sabotage_out(unsigned int hook, struct sk_buff **pskb, const struct net_device *in, const struct net_device *out, int (*okfn)(struct sk_buff *))
+{
+	if (out->hard_start_xmit == br_dev_xmit &&
+	    okfn != br_nf_forward_postrouting &&
+	    okfn != br_nf_forward_finish &&
+	    okfn != br_nf_local_out_postrouting &&
+	    okfn != br_nf_local_out_finish) {
+		struct sk_buff *skb = *pskb;
+
+		dprintk(KERN_NOTICE "ipv4_sabotage_out %i %p\n", hook, skb);
+		if (hook == NF_IP_FORWARD && skb->physindev == NULL)
+			skb->physindev = (struct net_device *)in;
+		okfn(skb);
+		return NF_STOLEN;
+	}
+
+	return NF_ACCEPT;
+}
+
+
+static struct nf_hook_ops br_nf_ops[] = {
+	{ { NULL, NULL }, br_nf_pre_routing, PF_BRIDGE, NF_BR_PRE_ROUTING, 0 },
+	{ { NULL, NULL }, br_nf_local_in, PF_BRIDGE, NF_BR_LOCAL_IN, 0 },
+	{ { NULL, NULL }, br_nf_forward, PF_BRIDGE, NF_BR_FORWARD, 0 },
+	{ { NULL, NULL }, br_nf_local_out, PF_BRIDGE, NF_BR_LOCAL_OUT, INT_MIN },
+	{ { NULL, NULL }, ipv4_sabotage_in, PF_INET, NF_IP_PRE_ROUTING, INT_MIN },
+	{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_FORWARD, NF_IP_PRI_BRIDGE_SABOTAGE },
+	{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_LOCAL_OUT, NF_IP_PRI_BRIDGE_SABOTAGE },
+	{ { NULL, NULL }, ipv4_sabotage_out, PF_INET, NF_IP_POST_ROUTING, INT_MIN },
+};
+
+#define NUMHOOKS (sizeof(br_nf_ops)/sizeof(br_nf_ops[0]))
+
+
+int br_netfilter_init(void)
+{
+	int i;
+
+#ifndef WE_REALLY_INSIST_ON_NOT_HAVING_NAT_SUPPORT
+	struct sk_buff sk;
+
+	if (sizeof(struct tcp_skb_cb) + 4 >= sizeof(sk.cb)) {
+		extern int __too_little_space_in_control_buffer(void);
+		__too_little_space_in_control_buffer();
+	}
+#endif
+
+	for (i=0;i<NUMHOOKS;i++) {
+		int ret;
+
+		if ((ret = nf_register_hook(&br_nf_ops[i])) >= 0)
+			continue;
+
+		while (i--)
+			nf_unregister_hook(&br_nf_ops[i]);
+
+		return ret;
+	}
+
+	printk(KERN_NOTICE "Bridge firewalling registered\n");
+
+	return 0;
+}
+
+void br_netfilter_fini(void)
+{
+	int i;
+
+	for (i=NUMHOOKS-1;i>=0;i--)
+		nf_unregister_hook(&br_nf_ops[i]);
+}
diff -urN linux-2.4.16/net/bridge/br_private.h linux-2.4.16-brnf0.0.4/net/bridge/br_private.h
--- linux-2.4.16/net/bridge/br_private.h	Tue Jun 12 04:15:27 2001
+++ linux-2.4.16-brnf0.0.4/net/bridge/br_private.h	Mon Dec 10 18:37:56 2001
@@ -120,6 +120,7 @@
 extern void br_inc_use_count(void);
 
 /* br_device.c */
+extern int  br_dev_xmit(struct sk_buff *skb, struct net_device *dev);
 extern void br_dev_setup(struct net_device *dev);
 
 /* br_fdb.c */
@@ -145,6 +146,7 @@
 		struct sk_buff *skb);
 extern void br_forward(struct net_bridge_port *to,
 		struct sk_buff *skb);
+extern int  br_forward_finish(struct sk_buff *skb);
 extern void br_flood_deliver(struct net_bridge *br,
 		      struct sk_buff *skb,
 		      int clone);
@@ -165,6 +167,7 @@
 			   int *ifindices);
 
 /* br_input.c */
+extern int  br_handle_frame_finish(struct sk_buff *skb);
 extern void br_handle_frame(struct sk_buff *skb);
 
 /* br_ioctl.c */
@@ -176,6 +179,10 @@
 	     unsigned long arg2);
 extern int br_ioctl_deviceless_stub(unsigned long arg);
 
+/* br_netfilter.c */
+extern int br_netfilter_init(void);
+extern void br_netfilter_fini(void);
+
 /* br_stp.c */
 extern int br_is_root_bridge(struct net_bridge *br);
 extern struct net_bridge_port *br_get_port(struct net_bridge *br,
diff -urN linux-2.4.16/net/core/netfilter.c linux-2.4.16-brnf0.0.4/net/core/netfilter.c
--- linux-2.4.16/net/core/netfilter.c	Fri Apr 27 23:15:01 2001
+++ linux-2.4.16-brnf0.0.4/net/core/netfilter.c	Mon Dec 10 18:37:56 2001
@@ -338,10 +338,15 @@
 			       const struct net_device *indev,
 			       const struct net_device *outdev,
 			       struct list_head **i,
-			       int (*okfn)(struct sk_buff *))
+			       int (*okfn)(struct sk_buff *),
+			       int hook_thresh)
 {
 	for (*i = (*i)->next; *i != head; *i = (*i)->next) {
 		struct nf_hook_ops *elem = (struct nf_hook_ops *)*i;
+
+		if (hook_thresh > elem->priority)
+			continue;
+
 		switch (elem->hook(hook, skb, indev, outdev, okfn)) {
 		case NF_QUEUE:
 			return NF_QUEUE;
@@ -409,6 +414,8 @@
 {
 	int status;
 	struct nf_info *info;
+	struct net_device *physindev;
+	struct net_device *physoutdev;
 
 	if (!queue_handler[pf].outfn) {
 		kfree_skb(skb);
@@ -431,11 +438,16 @@
 	if (indev) dev_hold(indev);
 	if (outdev) dev_hold(outdev);
 
+	if ((physindev = skb->physindev)) dev_hold(physindev);
+	if ((physoutdev = skb->physoutdev)) dev_hold(physoutdev);
+
 	status = queue_handler[pf].outfn(skb, info, queue_handler[pf].data);
 	if (status < 0) {
 		/* James M doesn't say fuck enough. */
 		if (indev) dev_put(indev);
 		if (outdev) dev_put(outdev);
+		if (physindev) dev_put(physindev);
+		if (physoutdev) dev_put(physoutdev);
 		kfree(info);
 		kfree_skb(skb);
 		return;
@@ -445,7 +457,8 @@
 int nf_hook_slow(int pf, unsigned int hook, struct sk_buff *skb,
 		 struct net_device *indev,
 		 struct net_device *outdev,
-		 int (*okfn)(struct sk_buff *))
+		 int (*okfn)(struct sk_buff *),
+		 int hook_thresh)
 {
 	struct list_head *elem;
 	unsigned int verdict;
@@ -477,7 +490,7 @@
 
 	elem = &nf_hooks[pf][hook];
 	verdict = nf_iterate(&nf_hooks[pf][hook], &skb, hook, indev,
-			     outdev, &elem, okfn);
+			     outdev, &elem, okfn, hook_thresh);
 	if (verdict == NF_QUEUE) {
 		NFDEBUG("nf_hook: Verdict = QUEUE.\n");
 		nf_queue(skb, elem, pf, hook, indev, outdev, okfn);
@@ -526,7 +539,7 @@
 		verdict = nf_iterate(&nf_hooks[info->pf][info->hook],
 				     &skb, info->hook, 
 				     info->indev, info->outdev, &elem,
-				     info->okfn);
+				     info->okfn, INT_MIN);
 	}
 
 	switch (verdict) {
diff -urN linux-2.4.16/net/core/skbuff.c linux-2.4.16-brnf0.0.4/net/core/skbuff.c
--- linux-2.4.16/net/core/skbuff.c	Tue Aug  7 17:30:50 2001
+++ linux-2.4.16-brnf0.0.4/net/core/skbuff.c	Mon Dec 10 18:37:56 2001
@@ -232,6 +232,8 @@
 	skb->sk = NULL;
 	skb->stamp.tv_sec=0;	/* No idea about time */
 	skb->dev = NULL;
+	skb->physindev = NULL;
+	skb->physoutdev = NULL;
 	skb->dst = NULL;
 	memset(skb->cb, 0, sizeof(skb->cb));
 	skb->pkt_type = PACKET_HOST;	/* Default type */
@@ -363,6 +365,8 @@
 	n->sk = NULL;
 	C(stamp);
 	C(dev);
+	C(physindev);
+	C(physoutdev);
 	C(h);
 	C(nh);
 	C(mac);
@@ -418,6 +422,8 @@
 	new->list=NULL;
 	new->sk=NULL;
 	new->dev=old->dev;
+	new->physindev=old->physindev;
+	new->physoutdev=old->physoutdev;
 	new->priority=old->priority;
 	new->protocol=old->protocol;
 	new->dst=dst_clone(old->dst);
diff -urN linux-2.4.16/net/ipv4/ip_output.c linux-2.4.16-brnf0.0.4/net/ipv4/ip_output.c
--- linux-2.4.16/net/ipv4/ip_output.c	Wed Oct 17 23:16:39 2001
+++ linux-2.4.16-brnf0.0.4/net/ipv4/ip_output.c	Mon Dec 10 18:37:56 2001
@@ -819,6 +819,8 @@
 			skb_set_owner_w(skb2, skb->sk);
 		skb2->dst = dst_clone(skb->dst);
 		skb2->dev = skb->dev;
+		skb2->physindev = skb->physindev;
+		skb2->physoutdev = skb->physoutdev;
 
 		/*
 		 *	Copy the packet header into the new buffer.
@@ -882,6 +884,7 @@
 		iph->tot_len = htons(len + hlen);
 
 		ip_send_check(iph);
+		memcpy(skb2->data - 16, skb->data - 16, 16);
 
 		err = output(skb2);
 		if (err)
diff -urN linux-2.4.16/net/ipv4/netfilter/ip_tables.c linux-2.4.16-brnf0.0.4/net/ipv4/netfilter/ip_tables.c
--- linux-2.4.16/net/ipv4/netfilter/ip_tables.c	Wed Oct 31 00:08:12 2001
+++ linux-2.4.16-brnf0.0.4/net/ipv4/netfilter/ip_tables.c	Mon Dec 10 18:37:56 2001
@@ -114,12 +114,15 @@
 static inline int
 ip_packet_match(const struct iphdr *ip,
 		const char *indev,
+		const char *physindev,
 		const char *outdev,
+		const char *physoutdev,
 		const struct ipt_ip *ipinfo,
 		int isfrag)
 {
 	size_t i;
 	unsigned long ret;
+	unsigned long ret2;
 
 #define FWINV(bool,invflg) ((bool) ^ !!(ipinfo->invflags & invflg))
 
@@ -149,7 +152,13 @@
 			& ((const unsigned long *)ipinfo->iniface_mask)[i];
 	}
 
-	if (FWINV(ret != 0, IPT_INV_VIA_IN)) {
+	for (i = 0, ret2 = 0; i < IFNAMSIZ/sizeof(unsigned long); i++) {
+		ret2 |= (((const unsigned long *)physindev)[i]
+			^ ((const unsigned long *)ipinfo->iniface)[i])
+			& ((const unsigned long *)ipinfo->iniface_mask)[i];
+	}
+
+	if (FWINV(ret != 0 && ret2 != 0, IPT_INV_VIA_IN)) {
 		dprintf("VIA in mismatch (%s vs %s).%s\n",
 			indev, ipinfo->iniface,
 			ipinfo->invflags&IPT_INV_VIA_IN ?" (INV)":"");
@@ -162,7 +171,13 @@
 			& ((const unsigned long *)ipinfo->outiface_mask)[i];
 	}
 
-	if (FWINV(ret != 0, IPT_INV_VIA_OUT)) {
+	for (i = 0, ret2 = 0; i < IFNAMSIZ/sizeof(unsigned long); i++) {
+		ret2 |= (((const unsigned long *)physoutdev)[i]
+			^ ((const unsigned long *)ipinfo->outiface)[i])
+			& ((const unsigned long *)ipinfo->outiface_mask)[i];
+	}
+
+	if (FWINV(ret != 0 && ret2 != 0, IPT_INV_VIA_OUT)) {
 		dprintf("VIA out mismatch (%s vs %s).%s\n",
 			outdev, ipinfo->outiface,
 			ipinfo->invflags&IPT_INV_VIA_OUT ?" (INV)":"");
@@ -261,6 +276,7 @@
 	/* Initializing verdict to NF_DROP keeps gcc happy. */
 	unsigned int verdict = NF_DROP;
 	const char *indev, *outdev;
+	const char *physindev, *physoutdev;
 	void *table_base;
 	struct ipt_entry *e, *back;
 
@@ -270,6 +286,9 @@
 	datalen = (*pskb)->len - ip->ihl * 4;
 	indev = in ? in->name : nulldevname;
 	outdev = out ? out->name : nulldevname;
+	physindev = (*pskb)->physindev ? (*pskb)->physindev->name : nulldevname;
+	physoutdev = (*pskb)->physoutdev ? (*pskb)->physoutdev->name : nulldevname;
+
 	/* We handle fragments by dealing with the first fragment as
 	 * if it was a normal packet.  All other fragments are treated
 	 * normally, except that they will NEVER match rules that ask
@@ -305,7 +324,7 @@
 		IP_NF_ASSERT(e);
 		IP_NF_ASSERT(back);
 		(*pskb)->nfcache |= e->nfcache;
-		if (ip_packet_match(ip, indev, outdev, &e->ip, offset)) {
+		if (ip_packet_match(ip, indev, physindev, outdev, physoutdev, &e->ip, offset)) {
 			struct ipt_entry_target *t;
 
 			if (IPT_MATCH_ITERATE(e, do_match,
diff -urN linux-2.4.16/net/ipv4/netfilter/ipt_LOG.c linux-2.4.16-brnf0.0.4/net/ipv4/netfilter/ipt_LOG.c
--- linux-2.4.16/net/ipv4/netfilter/ipt_LOG.c	Mon Nov  5 18:53:07 2001
+++ linux-2.4.16-brnf0.0.4/net/ipv4/netfilter/ipt_LOG.c	Mon Dec 10 18:37:56 2001
@@ -285,10 +285,13 @@
 	level_string[1] = '0' + (loginfo->level % 8);
 	spin_lock_bh(&log_lock);
 	printk(level_string);
-	printk("%sIN=%s OUT=%s ",
-	       loginfo->prefix,
-	       in ? in->name : "",
-	       out ? out->name : "");
+	printk("%sIN=%s ", loginfo->prefix, in ? in->name : "");
+	if ((*pskb)->physindev && in != (*pskb)->physindev)
+		printk("PHYSIN=%s ", (*pskb)->physindev->name);
+	printk("OUT=%s ", out ? out->name : "");
+	if ((*pskb)->physoutdev && out != (*pskb)->physoutdev)
+		printk("PHYSOUT=%s ", (*pskb)->physoutdev->name);
+
 	if (in && !out) {
 		/* MAC logging for input chain only. */
 		printk("MAC=");
